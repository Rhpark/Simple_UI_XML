# .github/workflows/android-ci.yml
name: Android CI

on:
  push:
    branches: [ master ]      # 기본 브랜치가 master이면 그대로, main이면 main으로 변경
  pull_request:
    branches: [ master ]

jobs: # CI에서 수행할 작업을 정의한다.
  build:
    runs-on: ubuntu-latest  # 이 작업은 최신 버전의 Ubuntu 환경에서 실행된다.

    steps:  # 이 작업에서 수행할 단계들을 정의한다.
      - name: Checkout
        uses: actions/checkout@v4 # 코드 리포지토리에서 소스 코드를 체크아웃한다.

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK 11 # JDK 11을 설정하는 단계
        uses: actions/setup-java@v4  # Java 환경을 설정하기 위한 액션을 사용한다.
        with:
          distribution: temurin  # Java 배포판으로 Temurin을 사용한다.
          java-version: 11  # 사용할 Java 버전을 11로 지정한다.
          cache: gradle  # Gradle 캐싱을 활성화하여 빌드 시간을 단축한다.


      # Android SDK 설치 (기본 설정만)
      - name: Set up Android SDK (base)
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses
        run: yes | sdkmanager --licenses

      - name: Install SDK packages
        run: sdkmanager "platforms;android-35" "build-tools;35.0.0" "platform-tools"

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable  # gradlew 파일에 실행 권한을 부여하는 단계
        run: chmod +x ./gradlew  # gradlew 파일에 실행 권한을 추가한다.

      # assemble+test를 분리하면 원인 파악이 쉽습니다.
      - name: Assemble
        run: ./gradlew assemble --stacktrace

      # Lint는 보고서만 남기고 일단 실패로 간주하지 않도록(임시)
      - name: Android Lint (non-blocking)
        run: ./gradlew lint
        continue-on-error: true

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/reports/**
            **/build/test-results/**
          if-no-files-found: ignore
